---------------------------------------------------------------------------
-- Pedro Ribeiro <pedro.ribeiro@york.ac.uk>
-- Department of Computer Science
-- University of York
-- York, YO10 5GH
-- UK
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- SUMMARY AND ACKNOWLEDGMENTS
---------------------------------------------------------------------------
--
-- This file contains an encoding of 'tick-tock'-CSP, as well as encodings
-- for the Refusal Testing model. This work is based on a tailoring (and
-- an extension to cater for termination) of a technique by David Mestel,
-- originally available at:
--
-- http://www.cs.ox.ac.uk/people/david.mestel/model-shifting.csp
--
-- That work referred to the strategy outlined in the following paper:
--
-- Mestel, D. and Roscoe, A.W., 2016. Reducing complex CSP models
-- to traces via priority. Electronic Notes in Theoretical Computer
-- Science, 325, pp.237-252.
--
-- The current file extends that work to 'tick-tock'-CSP, whose details
-- can be found in the paper:
--
-- Baxter, J., Ribeiro, P. and Cavalcanti, A. Sound reasoning in
-- tock-CSP. Acta Informatica 59, pp.125-162 (2022).
--
-- We observe that in that paper a refusal of an event e is encoded as e',
-- whereas here a refusal e is encoded as ref.e. This is a technicality
-- that enables the declaration of a parametric channel ref based solely on a
-- set of regular events. Furthermore we take advantage of FDR's Modules
-- to encapsulate the encoding within an MS(X) module where X is a set of
-- events. It exports two parametric processes, C3(P) corresponding to the
-- encoding of tick-tock, and CRT(P), corresponding to refusal-testing.
--
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- CHANGE LOG
---------------------------------------------------------------------------
--
-- 7-Sep-2022 : Included revised versions of the following operators:
--
--				* 	TimedInterrupt operator now admits terminating
--					processes in the first operand.
--				*	Added TCHAOS, the bottom of the refinement order in
--					tick-tock.
--				*	Added TimeOut operator.
--
--				Included notes regarding use of timed processes within
--				assertion commands, and the reasoning for the definition
--				of TCHAOS.
--
--				Added a note about timed deadlock freedom checking using
--				Roscoe's slow-abstraction technique.

---------------------------------------------------------------------------
-- USAGE
---------------------------------------------------------------------------
--
-- Modelling:
--
-- Processes in 'tick-tock' are modelled within a Timed Section, declared as
-- Timed(et) { ... }. Untimed operators USTOP and Int(P,Q) (untimed interrupt)
-- are defined below for convenience.
--
-- Instantiating the encoding:
--
-- Given a set of events of interest {a,b,c}, the encoding can be instantiated as:
-- instance M = MS({a,b,c}).
-- Important note: the argument of MS cannot be Events; this is a technicality
-- due to the way in which MS is defined.
--
-- Refinement checking:
--
-- To check that P is refined by Q in the tick-tock model the following
-- assertion should be written:
--
-- assert M::C3(P) [T= M::C3(Q)
--
-- Observe that although assertions can be written within a timed section,
-- processes written in an assertion command may not be correctly interpreted
-- as being in a timed section. For example, in the assertion below
--
-- assert M::C3(timed_priority(P ||| Q)) [T= ...
--
-- the interleaving on the left will not be interpreted to introduce the
-- appropriate synchronisation on 'tock' as would be expected in a
-- timed section. Therefore only named processes should appear in
-- such assertion commands.
--
-- Traces refinement in the tick-tock model corresponds to traces refinement
-- within a timed section, and does not require the encoding here.
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- DEFINITIONS
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- Auxiliary definitions for tick-tock-CSP modelling
---------------------------------------------------------------------------

-- Events
channel tock, tock'

-- For definition of timed sections, no time is added implicitly.
et(_) = 0

-- Timelock (untimed STOP)
USTOP = STOP

-- Untimed interrupt
UInt(P__,Q__) = P__ /\ Q__

Timed(et) {

	-- Timed SKIP
	TSKIP = SKIP

	-- Nondeterministic wait
	WAIT_INTERVAL(S__) = |~| x__ : S__ @ WAIT(x__)

	-- Timed deadlock
	TSTOP = STOP

	-- Deadlines on processes to terminate
	EndBy(P__,d__) = P__ /\ (WAIT(d__) ; USTOP)
	Deadline(P__,d__) = EndBy(P__,d__)

	-- Deadline on processes to start
	StartBy(P__,d__) = P__ [] (WAIT(d__) ; USTOP)
	-- Deadline on event
	EDeadline(e__,d__) = StartBy(e__ -> SKIP,d__)

	-- Strict timed interrupt
	channel finishedp__, finishedq__, timeout__

	-- Behaves as P__ until it either terminates, or, after exactly
	-- d__ time units behaves as Q__.
	TimedInterrupt(P__,d__,Q__) =
      ((((P__; EDeadline(finishedp__,0))
        /\ timeout__ -> (RUN(diff(Events,{finishedp__,finishedq__,timeout__}))
                       /\ finishedq__ -> SKIP)
       )
         [| Events |]
       RT__(d__,Q__)) \ {finishedp__, finishedq__, timeout__}); SKIP

	-- Timeout process:
	--
	-- Initially behaves as P__, and if no event from P__ is communicated
	-- before exactly d__ time units then, after exactly d__ time units it
	-- behaves as Q__.
	TimeOut(P__,d__,Q__) =
		(P__ /+Events+\ (TimedInterrupt(Some__,d__,STOP);RUN(Events)))
		[]
		(WAIT(d__);Q__)
}

---------------------------------------------------------------------------
-- Special cases
---------------------------------------------------------------------------

-- A version of TimedInterrupt that can be used when P__ is known not to
-- terminate. It uses RTd__, a simplified version or the auxiliary process
-- RT__, defined later.

STimedInterrupt(P__,d__,Q__) = (P__ /+Events+\ RTd__(d__));Q__

-- Note: TimeOut(P__,d__,Q__) cannot be used in a recursive definition as
-- 		 /+ +\ cannot be recursed. However, TimeOut_1(P__,Q__) can be used.
--
-- Besides, TimeOut(P__,d__,Q__) can result in a non-optimal representation
-- in FDR.

-- TimeOut_1(P__,Q__) is an efficient timeout operator for d__ = 1, that
-- can be used when P__ is known not to have an initial deadline.

TimeOut_1(P__,Q__) = (USTOP[+{tock}+]P__) [] (tock -> Q__)

-- A similar observation applies to the STimedInterrupt operator. Below is
-- an optimised version that is applicable whenever P__ is known not to
-- impose a deadline.

STimedInterrupt_1(P__) = (USTOP[+{tock}+]P__) /\ (tock -> TSKIP)

-- The in-built process CHAOS(_) of FDR is only suitable for analysis
-- up to the failures-divergences model. By examining its graph in FDR
-- it is apparent that its definition is given as follows.
--
-- CHAOS(S__) = USTOP |~| ([] x__ : S__ @ x__ -> CHAOS(S__))
--
-- Therefore, in the context of tick-tock (assuming tock is in S__) we
-- have that in addition to timelocking, the process can offer any of
-- the events in the set S__ in external choice. This is ok in the failures
-- model given that the external choice becomes an internal choice. For
-- example, consider the following equality in the failures model:
--
-- USTOP |~| (a -> Q [] b -> Q) = USTOP |~| a -> Q |~| b -> Q
--
-- In tick-tock, however, if CHAOS(S__) chooses to behave as the external
-- choice, then preceding a tock there is an empty refusal, and so a
-- refinement of CHAOS(S__) could not possibly refuse an event before tock.
--
-- Instead, we adopt the following process TCHAOS, a version of CHAOS
-- suitable for use in tick-tock: it offers the events in S__
-- non-deterministically and can either timelock or deadlock. We note that
-- tock does not need to be a member of S__.

TCHAOS(S__) = CHAOS(S__) /\ (SKIP |~| USTOP |~| tock -> TCHAOS(S__))

-- When used with S__ as the set of all events of interest, then TCHAOS
-- is the bottom of the refinement order, ie. every process refines it
-- in tick-tock.
--
-- TCHAOS(S__) is equivalent to the following definition within a timed
-- section:
--
-- Timed(OneStep) {
--
--   TCHAOS(S__) = C(union(S__,{tock}))
--   C(S__) = (|~| e__ : S__ @ e__ -> C(S__)) |~| USTOP |~| SKIP
--
-- }
--
-- This is, however, not used as it can cause an inefficient compilation
-- by FDR.

---------------------------------------------------------------------------
-- Auxiliary processes
---------------------------------------------------------------------------

-- Wait for use outside Timed Sections, and where termination is immediate.
wait(n__) = if n__ > 0 then tock -> wait(n__-1) else SKIP

-- Auxiliary counter for TimedInterrupt definition above.
RT__(d__,Q__) =
	if d__ > 0
        then RUN(diff(Events,{finishedp__, finishedq__, timeout__, tock}))
		  	 /\ (finishedp__ -> SKIP [] tock -> RT__(d__-1,Q__))
	    else timeout__ -> Q__; finishedq__ -> SKIP

-- Auxiliary counter for the STimedInterrupt definition above.
RTd__(d__) =
	if d__ > 0
		then RUN(diff(Events,{tock})) /\ tock -> RTd__(d__-1)
		else SKIP

-- Offers in choice to perform any event once followed by termination.
Some__ = [] x__ : Events @ x__ -> SKIP

-- Termination at any time.
SKIP_ANYTIME = SKIP |~| tock -> SKIP_ANYTIME

---------------------------------------------------------------------------
-- Timed deadlock checking
---------------------------------------------------------------------------

external prioritise

-- Version of P__ suitable for checking timed-deadlock freedom via
-- divergence-freedom checking. In P__ tock is relationally renamed to
-- tock and tock' and subsequently every event other than tock and tock'
-- is prioritised over tock, that is, tock can only happen from states where
-- no other regular event (in diff(Events,{tock',tock})) is possible.
-- Finally, hiding tock turns a state where tock is the only event offered
-- forever into a divergence, which can be identified by FDR.
TDeadlock(P__) = prioritise(P__[[tock<-tock,tock<-tock']],
						   	<diff(Events,{tock',tock}),{tock}>)\{tock}

-- This technique is an implementation of Roscoe's slow-abstraction described
-- in the follow paper.
--
-- A.W. Roscoe, The automated verification of timewise refinement, in:
-- First Open EIT ICT Labs Workshop on Cyber-Physical Systems Engineering, 2013
--
-- The check can therefore be used as:
--
-- assert TDeadlock(P) :[divergence free]
--
-- We note that, according to the definition of timed deadlock, a deadlocked
-- process is not timed deadlocked. A timed deadlocked process allows time
-- to pass, but nothing else to happen.

---------------------------------------------------------------------------
-- Semantic encoding
---------------------------------------------------------------------------

module MS(Sigma)

external prioritisepo

-- Note that for the purposes of encoding refusals/acceptances in this model
-- ref.x, rather than x' is used, unlike that discussed in the paper. This
-- is a technicality as it makes it easier to defined a parametrised channel.

channel ref:union(Sigma,{tock,tick})
channel acc:union(Sigma,{tock,tick})

channel stab
channel tick

-- The partial order gives each event 'x' priority over 'ref.x'
order = {(x,ref.x) | x:union(Sigma,{tock,tick})}

---------------------------------------------------------------------------
-- Context C1
---------------------------------------------------------------------------

-- This is the first context, whereby in interleaving with P we have the
-- process that can perform ref or stab, and is prioritised according to
-- 'order', whereby 'Sigma' have same priority as 'tau' and 'tick'.
--
-- This is effectively an implementation of the RT-model, because after each
-- normal trace (ie, with events drawn from Sigma) we have the possibility
-- to also observe in the trace refusal information, at that point.

C1(P__) =
	prioritisepo(
		P__ ||| RUN({|ref,stab|}),
		union(Sigma,{|ref,tock,tick|}),
		order,
		union(Sigma,{tock,tick})
	)

---------------------------------------------------------------------------
-- Encoding of 'tick-tock'-CSP model
---------------------------------------------------------------------------

C2(P__) = C1(P__) [| union(Sigma,{|ref,stab,tock,tick|}) |] Sem

Sem = ([] x : union(Sigma,{tock,tick}) @ x -> Sem)
      [] (ref?x -> Ref)
      [] (stab -> Ref)

Ref = (ref?x -> Ref) [] (stab -> Ref) [] tock -> Sem

exports

-- Refusal-testing (via refusals)
CRT(P__) = C1(P__ ; tick -> SKIP)

-- tick-tock (via refusals)
C3(P__) = C2(P__ ; tick -> SKIP)

endmodule
---------------------------------------------------------------------------
